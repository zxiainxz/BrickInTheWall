; DrawSprite8x8 - Draws a 8x8 sprite on the screen at (xcoord, ycoord)
; Inputs: ix - Start address of the sprite data
;         de - screen address
;         hl - x, y
DrawSprite8x8:

                        ld a, l                         ; load y in a
                        ld b, 8                         ; Size of sprite
DrawRow:
                        ex af, af'                      ; store y coord in a`

                        push bc

                        ld b, (ix)                      ; sprite in b
                        ld c, 0                         ; empty sprite in c

                        ld a, h                         ; Load x coord into a
                        and 7                           ; how many shifts required
                        jr z, DrawFirstPart             ; 0 shifts, so only need to draw the b sprite

                        cp 5                            ; Check if it's quick to shift left
                        jr nc, ShiftLeft

                        and a                           ; clear carry
DoShift:
                        rr b                            ; roll right, overflow into carry
                        rr c                            ; roll right, picking up any overflow from b
                        dec a                           ; and loop
                        jr nz, DoShift

ShiftComplete:
                        inc e                           ; move to next char

                        ld a, (de)                      ; what's already there
                        xor c                           ; xor with 2nd part of the shifted sprite
                        ld (de), a                      ; put it onto the screen

                        dec e                           ; move back to the first char

DrawFirstPart:
                        ld a, (de)                      ; what's already on the screen
                        xor b                           ; xor the 1st part of the shifted sprite
                        ld (de), a                      ; put it on the screen

LineDrawn:
                        ex af, af'                      ; get ycoord from a'

                        pop bc

                        call nextrow                    ; get the next row address, updating the row in a
                        inc ix

                        djnz DrawRow

                        ret

ShiftLeft:
                        xor 7                           ; flip the last 3 bits to get the number of left shifts
                        inc a
ShiftLeft1:
                        rl b                            ; roll b left, overflow into carry
                        rl c                            ; roll c left, getting overflow from carry

                        dec a
                        jr nz, ShiftLeft1               ; loop

                                                        ; At this point the 1st part of the shifted sprite is in c
                                                        ; and b has the second part, but the sprite drawing part
                                                        ; wants the 1st part in b and the second in c, so switch
                        ld a, b
                        ld b, c
                        ld c, a
                        jr ShiftComplete

; DrawSprite8x8 - Draws a 8x8 sprite on the screen at (xcoord, ycoord)
; Inputs: ix - Start address of the sprite data
;         de - screen adderess
;          h - x coordinate
;          l - y coordinate
DrawSprite16x8:
                        push bc

                        ld a, h
                        ld (tmpx), a
                        ld a, l

                        ld b, 8
DrawRow16:
                        ex af, af'

                        push bc

                        ld b, (ix)
                        ld c, (ix+1)
                        ld h, 0

                        ld a, (tmpx)
                        and 7
                        jr z, Draw16

                        cp 5                            ; Check if it's quick to shift left
                        jr nc, Shift16Left

                        and a
DoShift16:
                        rr b
                        rr c
                        rr h
                        dec a
                        jr nz, DoShift16

Shift16Complete:
                        inc e
                        inc e

                        ld a, (de)
                        xor h
                        ld (de), a

                        dec e
                        dec e

Draw16:
                        ld a, (de)
                        xor b
                        ld (de), a

                        inc e

                        ld a, (de)
                        xor c
                        ld (de), a

                        dec e

                        ex af, af'

                        ld bc, 2
                        add ix, bc

                        pop bc

                        call nextrow
                        
                        djnz DrawRow16

                        pop bc

                        ret

Shift16Left:
                        xor 7                           ; flip the last 3 bits to get the number of left shifts
                        inc a
Shift16Left1:
                        rl c
                        rl b
                        rl h

                        dec a
                        jr nz, Shift16Left1               ; loop

                        ld a, c
                        ld c, b
                        ld b, h
                        ld h, a
                        jr Shift16Complete

; CheckCollision8v16: Check for a collision between an 8 sprite and a 16 sprite
; Inputs: a - one coord
;         c - other coord
; Outputs: sets z on collision
CheckCollision8v16:
                        sub c                                   ; xcoord  - batx

                        add 7                                   ; add 7 to prevent negative

                        cp 24                                   ; compare to total width 8 + 16

                        ret nc

                        cp a                                    ; there was a collision, so set z
                        ret

CheckCollision8v8:
                        sub c
                        add 7
                        cp 16
                        ret nc
                        cp a
                        ret

CheckCollision8v4:
                        sub c
                        add 3
                        cp 12
                        ret nc
                        cp a
                        ret

; CheckCollision8v16x8v8 - Checks for collisions between two objects, one 8x8 and one 16x8
; Inputs: hl - x,y of one object
;         bc - x,y of the second object
; Outputs: z set on collision
; Trashes: a
CheckCollision8v16x8v8:
                        ld a, l                                 ; y coord
                        sub c                                   ; subtract other y
                        add a, 7                                ; add max distance
                        cp 15
                        jr z, CheckX8v16x8v8
                        ret nc
CheckX8v16x8v8                       
                        ld a, h                                 ; x coord
                        sub b                                   ; subtract other x
                        add 7                                   ; add max distance
                        cp 24
                        ret nc
                        cp a
                        ret

CheckColllision6v16x6v8:
                        ld a, l
                        sub c
                        add a, 5
                        cp 13
                        jr z, CheckX6v16x6v8
                        ret nc
CheckX6v16x6v8:
                        ld a, h
                        sub b
                        add a, 5
                        cp 22
                        ret nc
                        cp a
                        ret

DrawBallSprite:
                        ld ix, Ball_Data
                        call DrawSprite8x8
                        ret

DrawBrickSprite:
                        ld ix, Brick_Data
                        call DrawSprite16x8
                        ret

; da na na na na na na na batsprite!
DrawBatSprite:
                        ld ix, Bat_Data
                        call DrawSprite16x8
                        ret