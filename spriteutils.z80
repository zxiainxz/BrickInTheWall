; DrawSprite8x8 - Draws a 8x8 sprite on the screen at (xcoord, ycoord)
; Inputs: ix - Start address of the sprite data
;         de - screen address
;         hl - x, y
DrawSprite8x8:
                        push bc

                        ld b, 8                         ; Size of sprite
DrawRow:
                        push bc

                        ld b, (ix)                      ; sprite in b
                        ld c, 0                         ; empty sprite in c

                        ld a, h                         ; Load x coord into a
                        and 7                           ; how many shifts required
                        jr z, DrawFirstPart             ; 0 shifts, so only need to draw the b sprite

                        cp 5                            ; Check if it's quick to shift left
                        jr nc, ShiftLeft

                        and a                           ; clear carry
DoShift:
                        rr b                            ; roll right, overflow into carry
                        rr c                            ; roll right, picking up any overflow from b
                        dec a                           ; and loop
                        jr nz, DoShift

ShiftComplete:
                        inc e                           ; move to next char

                        ld a, (de)                      ; what's already there
                        xor c                           ; xor with 2nd part of the shifted sprite
                        ld (de), a                      ; put it onto the screen

                        dec e                           ; move back to the first char

DrawFirstPart:
                        ld a, (de)                      ; what's already on the screen
                        xor b                           ; xor the 1st part of the shifted sprite
                        ld (de), a                      ; put it on the screen

LineDrawn:
                        pop bc

                        call NextRow2                    ; get the next row address
                        inc ix

                        djnz DrawRow

                        pop bc
                        ret

ShiftLeft:
                        xor 7                           ; flip the last 3 bits to get the number of left shifts
                        inc a
ShiftLeft1:
                        rl b                            ; roll b left, overflow into carry
                        rl c                            ; roll c left, getting overflow from carry

                        dec a
                        jr nz, ShiftLeft1               ; loop

                                                        ; At this point the 1st part of the shifted sprite is in c
                                                        ; and b has the second part, but the sprite drawing part
                                                        ; wants the 1st part in b and the second in c, so switch
                        ld a, b
                        ld b, c
                        ld c, a
                        jr ShiftComplete

; de - screen address
; ix - sprite data
OverdrawSprite8x8NoShift:
                        push bc

                        ld b, 8                         ; Size of sprite
OverdrawRow:
                        ld a, (ix)                      ; what's already on the screen
                        ld (de), a                      ; put it on the screen

                        call NextRow2                    ; get the next row address
                        inc ix

                        djnz OverdrawRow

                        pop bc
                        ret

; CheckCollision8v16x8v8 - Checks for collisions between two objects, one 8x8 and one 16x8
; Inputs: hl - x,y of one object
;         bc - x,y of the second object
; Outputs: z set on collision
; Trashes: a
CheckCollision8v16x8v8:
                        ld a, l                                 ; y coord
                        sub c                                   ; subtract other y
                        add a, 7                                ; add max distance
                        cp 15
                        jr z, CheckX8v16x8v8
                        ret nc
CheckX8v16x8v8                       
                        ld a, h                                 ; x coord
                        sub b                                   ; subtract other x
                        add 7                                   ; add max distance
                        cp 23
                        ret nc
                        cp a
                        ret

CheckColllision6v16x6v8:
                        ld a, l
                        sub c
                        add a, 5
                        cp 13
                        jr z, CheckX6v16x6v8
                        ret nc
CheckX6v16x6v8:
                        ld a, h
                        sub b
                        add a, 5
                        cp 21
                        ret nc
                        cp a
                        ret

; Inputs: ix - points to ball sprite entry
UpdateBallXY:
                        ld (ix+SPRITETABLE_Y), hl

                        call scadd
                        ld (ix+SPRITETABLE_SCADD), de

                        ld a, h
                        and 7

                        exx

                        ld de, (ix+SPRITETABLE_PRESHIFT)

                        ld h, 0
                        ld l, a

                        add hl, hl
                        
                        add hl, de
                        ld a, (hl)
                        inc hl
                        ld h, (hl)
                        ld l, a

                        ex de, hl               ; de now contains the x offset ball data

                        exx

                        ld a, l
                        and 7
                        
                        exx
                        
                        ld b, a
                        ld a, 8
                        sub b

                        ld h, 0
                        ld l, a

                        add hl, de

                        ld (ix+SPRITETABLE_DATA), hl

                        exx
                        ret

; ix - sprite location
; hl - x,y
UpdateSpriteXY:
                        ex de, hl                   ; Switch hl to de so that hl is preserved (faster than push pop)
                        or a                        ; clear carry flag
                        ld hl, (ix+SPRITETABLE_Y)   ; get x,y
                        sbc hl, de                  ; compare

                        ex de, hl                   ; switch back to restore hl
                        ret z                       ; return if equal

                        push hl

                        ld (ix+SPRITETABLE_Y), hl   ; store x,y

                        call scadd                      ; convert to screen addr
                        ld (ix+SPRITETABLE_SCADD), de   ; store screen addr

                        ld a, h                         ; get the X cell offset
                        and 7

                        ld de, (ix+SPRITETABLE_PRESHIFT)        ; load the lookup table

                        ld h, 0
                        ld l, a                                 ; which entry do we need

                        add hl, hl                              ; double it as it's word addressed
                        
                        add hl, de                              ; point hl to entry
                        ld a, (hl)                              ; copy entry into hl
                        inc hl
                        ld h, (hl)
                        ld l, a

                        ld (ix+SPRITETABLE_DATA), hl            ; store the entry

                        pop hl
                        ret

InitialliseSpriteTable:
                        ld b, MAX_SPRITES
                        ld ix, spritetable
InitNextSprite:
                        xor a

                        ld (ix+SPRITETABLE_Y), a

                        ld de, SPRITETABLE_SIZE
                        add ix, de

                        djnz InitNextSprite
                        ret