GameLoopInitialise:
                        ld hl, lives
                        ld (hl), INITIAL_LIVES                          ; set initial lives

                        call StartLevel

                        ld bc, score_string                             ; Draw the hud
                        ld hl, 0x0000
                        call DisplayString
                        call DrawScore

                        ld bc, lives_string
                        ld hl, 0xA300
                        call DisplayString
                        call DrawLives

                        call LoadSprites                                ; Put the sprites this scene uses into the
                                                                        ; sprite table

                        jp InitialiseFinished

MainGameLoop:
                        halt

                        di                                      ; We're abusing the stack
                                                                ; so turn off interrupts

                        ld (GLDrawLoopStack+1), sp              ; Save the stack

                        ld a, (ClearCellCount)                  ; Check how many clear cells
                        and a
                        jr z, GLClearCellFinished               ; 0? Skip

                        ld b, a
                        ld hl, ClearCellList                    ; set stack to point to ClearCellList
                        ld sp, hl

GLEraseCell:
                        ld a, 2
                        out (0xfe), a

                        pop hl                                  ; Take the cell data from the stack
                        pop de                                  

                        ; ld (hl), e
                        ld h, d                                 ; Convert attr address to screen

                        ld (GLEraseCellScreenSM+1), hl          ; store screen address for later
                        ld de, ScreenBuffer - SCREEN_BASE       ; offset between screen address and buffer
                        add hl, de                              ; get address in buffer
                        ex de, hl                               ; switch to put buffer in de
GLEraseCellScreenSM:
                        ld hl, 0                                ; restore screen address

                        dup 7
                        ld a, (de)                              ; Copy the buffer cell to screen
                        ld (hl), a
                        inc d
                        inc h
                        edup
                        ld a, (de)
                        ld (hl), a

                        djnz GLEraseCell


GLClearCellFinished:
                        ld a, 3
                        out (0xfe), a

                        ld a, (DrawCellCount)                   ; How many DrawCells?
                        and a
                        jr z, GLDrawLoopFinished                ; 0? Skip

                        ld b, a
                        ld hl, DrawCellList                     ; point stack at DrawCellList

                        ld sp, hl

GLDrawCell:
                        pop hl                                  ; pop the attr address
                        pop de                                  ; pop the screen high byte

                        ; ld (hl), e                            ; e is unused
                        ld h, d                                 ; make hl the screen address

                        dup 3
                        pop de                                  ; pop the next two bytes of the cell data
                        ld (hl), e                              ; put them onto the screen
                        inc h
                        ld (hl), d
                        inc h
                        edup

                        pop de
                        ld (hl), e
                        inc h
                        ld (hl), d

                        djnz GLDrawCell

GLDrawLoopFinished:
GLDrawLoopStack:        ld sp, 0                                ; restore the stack

                        ei                                      ; Finished messing with the stack

                        ld hl, DrawCellList
                        ld (DrawCellListNext), hl               ; reset the DrawCells

                        ld a, 2
                        out (0xfe), a

                        call ClearCells                         ; Move the drawn cells to the clear list

                        ld a, 1
                        out (0xfe), a

GameLoopDrawFinished:
                        ld ix, spritetable

                        call ProposeBallMove                            ; proposed ball coordinates in hl

                        ld a, l
                        cp SCREEN_HEIGHT - BALL_HEIGHT                  ; Check if the ball is hitting the bottom
                        jr z, LoseBall

                        call CheckBatCollision          ; Check collisions

                        call CheckBrickCollision

                        call CheckYEdgeCollision
                        call CheckXEdgeCollision

                        call ReadKeys
                        call UpdateBatPosition
                        call CommitBatPosition

                        ; call DrawVelocity

                        call UpdateBallXY
                        call CommitBallPosition

GameLoopLogicFinished:

                        ld a, (LevelBlockCount)                 ; check how many blocks are left
                        and a
                        jr z, LevelComplete                     ; 0? Level is complete

                        ld a, (lives)                           ; Check how many lives left
                        and a
                        jr z, GameOver                          ; 0? Game over

                        jp MainGameLoop                         ; Run loop again

; trashes hl
LoseBall:
                        call DrawLives                          ; delete the old lives

                        ld hl, lives
                        dec (hl)                                ; decrease lives

                        xor a
                        ld (bonusadder), a              ; Remove any bonus accrued

                        call DrawLives                          ; draw new lives

                        call ResetBallBat                       ; put bat & ball back to starting positions
                        jr GameLoopLogicFinished                ;


GameOver:
                        xor a
                        ld (currentlevel), a                    ; reset the level

                        ld a, GAMEOVER_SCENE                    ; Show the game over scene
                        ld (currentloop), a
                        jp SwitchMainLoop

LevelComplete:
                        ld a, (currentlevel)                    ; move to next level
                        inc a

                        cp LEVEL_COUNT                          ; game finished?
                        jr z, GameComplete

                        ld (currentlevel), a                    ; update current level

                        ld a, LEVELCOMPLETE_SCENE               ; run level complete scene
                        ld (currentloop), a
                        jp SwitchMainLoop

GameComplete:
                        xor a                                   ; reset level
                        ld (currentlevel), a
                        ld a, START_SCENE                       ; run start scene
                        ld (currentloop), a
                        jp SwitchMainLoop

StartLevel:
                        xor a                                           ; Stationary ball to start
                        ld (yballdir), a
                        ld (xballdir), a

                        call FadeScreenToWhite                          ; Fade out the screen
                        call ResetLevel                                 ; clear level data
                        call LoadLevel                                  ; load the new level

                        ld hl, (currentbg)                              ; setup the background
                        call DrawBackground

                        ld a, (currentbgattr)                           ; colour the playfield
                        call ClearPlayfield

                        call DisplayLevel                               ; draw the bricks

                        call CopyBackBufferToScreen                     ; copy everything to the main screen

                        ret

ResetBallBat:
                        ld ix, spritetable

                        ld hl, INITIAL_BALL_COORDS                      ; Reset the ball
                        call UpdateSpriteXY
                        ld (proposedbally), hl

                        ld de, SPRITETABLE_SIZE
                        add ix, de

                        ld hl, (ix+SPRITETABLE_Y)                       ; Reset the bat
                        ld a, INITIAL_BAT_X
                        ld h, a
                        call UpdateSpriteXY

                        ld h, INITIAL_BAT_X
                        ld l, 0
                        ld (ix+SPRITETABLE_X16), hl                     ; the bat uses 16bit coords
                        ld h, INITIAL_BAT_Y
                        ld (ix+SPRITETABLE_Y16), hl

                        ld hl, NULL                                     ; reset the x&y ball directions
                        ld (yballdir), hl
                        ret

DrawLifeTable:          dw DrawLife1, DrawLife2, DrawLife3
DrawLives:
                        ld a, (lives)                   ; check lives
                        and a
                        ret z                           ; 0? return

                        dec a                           ; 0 based array
                        add a, a                        ; double because lut is word based
                        ld h, 0
                        ld l, a                         ; offset
                        ld de, DrawLifeTable
                        add hl, de                      ; index into LUT

                        ld a, (hl)
                        inc hl
                        ld h, (hl)
                        ld l, a                         ; load offset into hl
                        jp (hl)                         ; jump to it

DrawLife3:                                              ; draw all three lives
                        ld de, SCREEN_BASE + 30
                        ld hl, bat16x8Data0
                        ld b, 2

                        call DrawLife

DrawLife2:                                              ; draw two lives
                        ld de, SCREEN_BASE + 27
                        ld hl, bat16x8Data7
                        ld b, 3
                        
                        call DrawLife

DrawLife1:                                               ; draw one life
                        ld de, SCREEN_BASE + 25
                        ld hl, bat16x8Data6
                        ld b, 3

                        call DrawLife

                        ret

; inputs: de - screen address
;         hl - data for bat, stored in column order
;         b  - iterations
DrawLife:
                        push de                 ; store initial screen address

                        dup 7
                        ld a, (de)              ; draw each row of the cell
                        inc hl                  ; skip the mask byte
                        xor (hl)
                        ld (de), a
                        inc hl
                        inc d
                        edup

                        ld a, (de)
                        inc hl                  ; skip the mask byte
                        xor (hl)
                        ld (de), a
                        inc hl

                        pop de                  ; restore initial screen address

                        inc de                  ; move to next cell
                        djnz DrawLife
                        ret

; Works out where the ball should move to
; Inputs: ix - set to the sprite table
; Outputs: hl - proposed ball x,y
ProposeBallMove:
                        ld hl, (ix+SPRITETABLE_Y)      ; Get ball coordinate
                        ld (oldbally), hl              ; store it for rolling back

                        ld a, (yballdir)               ; Get ball direction
                        and a
                        jr z, ProposeBallMoveX          ; Not moving? skip

                        add l                           ; move ball in that direction
                        ld l, a

                        ld (proposedbally), a           ; store proposed direction

ProposeBallMoveX:
                        ld a, (xballdir)               ; Get X direction
                        and a
                        ret z                           ; Not moving? return

                        add h                           ; move ball in that direction
                        ld h, a

                        ld (proposedballx), a
                        ret

; LoadSprites - Load the sprite data into the sprite table. Always use index 0 for ball, index 1 for bat
LoadSprites:
                        ld ix, spritetable

                        ld hl, ball8x8Data                      ; set up the ball
                        ld (ix+SPRITETABLE_PRESHIFT), hl

                        ld hl, INITIAL_BALL_COORDS
                        ld (proposedbally), hl
                        ld (oldbally), hl
                        call UpdateBallXY                       ; update the sprite table

                        call CommitBallPosition                 ; mark the ball cells as needing updating

                        ld de, SPRITETABLE_SIZE
                        add ix, de

                        ; bat

                        ld hl, bat16x8Data                      ; set up the bat
                        ld (ix+SPRITETABLE_PRESHIFT), hl

                        ld hl, INITIAL_BAT_COORDS
                        call UpdateSpriteXY

                        ld h, INITIAL_BAT_X
                        ld l, 0
                        ld (ix+SPRITETABLE_X16), hl             ; bat uses 16bits for the coords
                        ld h, INITIAL_BAT_Y                     ; high byte is the pixel coords
                        ld (ix+SPRITETABLE_Y16), hl             ; low byte is the subpixel

                        ld ix, spritetable
                        call CommitBatPosition
                        ret

; Checks if the bat and ball have collided
; inputs: hl - ball x, y
CheckBatCollision:
                        ld a, (yballdir)                ; If the ball isn't moving, it can't collide
                        cp 1
                        ret nz

                        ld a, l                         ; Check if ball is near bat
                        cp INITIAL_BAT_Y - BALL_HEIGHT  ; this is when the bottom of the ball crosses the bat line

                        ret c                           ; return if < 176, ball isn't near bat

                        ld bc, (ix+SPRITETABLE_SIZE+SPRITETABLE_Y)      ; bat x,y

                        call CheckCollision8v16x8v8
                        ret nz

                        xor a
                        ld (bonusadder), a              ; Reset the score bonus when we hit the bat

                        ; If the player hits the two pixels at either side of the bat
                        ; then that counts as a rebound

                        ld a, b                         
                        add 14
                        ld c, a

                        ld a, b
                        add 2
                        ld b, a

                        ld a, (ix+SPRITETABLE_X)
                        add 4
                        
                        cp b
                        jr c, GoLeft

                        cp c
                        jr nc, GoRight

                        cp a

                        call z, Switch_YDir
                        jr z, Ball_HitY
                        ret

GoLeft:
                        ld a, -1
                        ld (xballdir), a
                        call Ball_HitX

                        call Switch_YDir
                        jr Ball_HitY

GoRight:
                        ld a, 1
                        ld (xballdir), a
                        call Ball_HitX
                        
                        call Switch_YDir
                        jr Ball_HitY

; The ball was hit on the y axis and so it needs to be moved back to the old position moved again
; Outputs: hl - new proposed ball x,y
Ball_HitY:
                        ld a, (oldbally)

                        ld bc, (yballdir)
                        add c

                        ld (proposedbally), a

                        ld hl, (proposedbally)
                        ret

; The ball was hit on the x axis and so it needs to be moved back to the old position moved again
; Outputs: hl - new proposed ball x,y
Ball_HitX:
                        ld a, (oldballx)

                        ld bc, (xballdir)
                        add c

                        ld (proposedballx), a

                        ld hl, (proposedbally)
                        ret

; input: ix - set to spritetable
CheckYEdgeCollision:
                        ld a, (ix+SPRITETABLE_Y)

                        cp 8                            ; Check if the ball is hitting the top
                        call z, Switch_YDir
                        jr z, Ball_HitY
                        ret

; input: ix - set to spritetable
CheckXEdgeCollision:
                        ld a, (ix+SPRITETABLE_X)

                        and a
                        jr nz, CheckRightEdge
                        call Switch_XDir
                        jr Ball_HitX

CheckRightEdge:
                        cp 247
                        ret nz

                        call Switch_XDir
                        jr Ball_HitX
                        ret

Switch_YDir:
                        ld a, (yballdir)                ; Load balldir into a
                        neg                             ; negate direction
                        ld (yballdir), a                ; store new direction
                        cp a                            ; set the z flag to indicate a switch occurred

                        ret

Switch_XDir:
                        ld a, (xballdir)
                        neg
                        ld (xballdir), a
                        cp a

                        ret

ReadKeys:       
                        ld bc, Row_YUIOP
                        in a, (c)

                        rra                               ; check for P
                        jr nc, MoveBatRight              ; move right

                        rra                               ; check for O
                        jr nc, MoveBatLeft

                        ld a, (batvelocitytarget)
                        and a
                        jr nz, TargetZeroVelocity

                        ld bc, Row_VCXZShift                                ; Check for c, complete level
                        in a, (c)

                        and 8
                        jr z, CompleteLevel

                        ld bc, Row_SpaceSymMNB                              ; check for <space>, launch ball
                        in a, (c)

                        and 1
                        ret nz

                        ld a, INITIAL_BALL_Y_DIR
                        ld (yballdir), a
                        ld a, INITIAL_BALL_X_DIR
                        ld (xballdir), a
                        ret

TargetZeroVelocity:
                        xor a
                        ld (batvelocitytarget), a

                        push hl

                        ld hl, (batvelocitydelta)
                        sub l                               ; 16bit neg to invert the velocity delta
                        ld l, a
                        sbc a, a
                        sub h
                        ld h, a
                        ld (batvelocitydelta), hl

                        pop hl
                        ret

CompleteLevel:
                        xor a
                        ld (LevelBlockCount), a
                        ret

MoveBatLeft:
                        push hl

                        ld a, -BAT_VELOCITY_MAX
                        ld (batvelocitytarget), a
                        ld hl, -BAT_VELOCITY_DELTA
                        ld (batvelocitydelta), hl

                        pop hl
                        ret

MoveBatRight:
                        push hl

                        ld a, BAT_VELOCITY_MAX
                        ld (batvelocitytarget), a
                        ld hl, BAT_VELOCITY_DELTA
                        ld (batvelocitydelta), hl

                        pop hl
                        ret

UpdateBatPosition:
                        push hl

                        ld hl, (batvelocity)
                        ld a, (batvelocitytarget)

                        cp h
                        jr nz, UBP0

                        ld a, l
                        and a
                        jr z, UBP1

UBP0:
                        ld de, (batvelocitydelta)
                        add hl, de
                        ld (batvelocity), hl

UBP1:
                        ld a, h
                        and a
                        jr nz, UBP3

                        ld a, l
                        and a
                        jr z, UBPFinished

UBP3:
                        push ix

                        ld ix, spritetable+SPRITETABLE_SIZE
                        ld de, (ix+SPRITETABLE_X16)
                        ex de, hl

                        add hl, de

                        ld a, h
                        cp 241
                        jr c, UBP2

                        ex af, af'
                        xor a
                        ld hl, NULL
                        ld (batvelocity), hl
                        ld (batvelocitydelta), hl
                        ld (batvelocitytarget), a
                        ex af, af'

                        cp 255
                        jr z, UBP2
                        cp 250
                        jr nc, UBP2

                        ld hl, 0xF000

UBP2:
                        ld (ix+SPRITETABLE_X16), hl

                        ld l, (ix+SPRITETABLE_Y)
                        call UpdateSpriteXY

                        ld a, (yballdir)
                        and a
                        pop ix

                        jr z, MoveBallToBat

UBPFinished:
                        pop hl
                        ret

MoveBallToBat:
                        pop hl
                        ld ix, spritetable

                        ld a, (ix+SPRITETABLE_X+SPRITETABLE_SIZE)
                        add 4

                        ld hl, (ix+SPRITETABLE_Y)
                        ld h, a

                        ld (proposedbally), hl
                        call UpdateSpriteXY

                        ret


; Inputs: ix - point to spritetable
CommitBatPosition:
                        push hl
                        ld hl, (ix+SPRITETABLE_SIZE+SPRITETABLE_DATA)
                        ld de, (ix+SPRITETABLE_SIZE+SPRITETABLE_SCADD)

                        ld a, d                         ; convert pixel addr -> attribute addr
                        or 0x87                         ; see https://spectrumcomputing.co.uk/forums/viewtopic.php?t=3070
                        rra
                        rra
                        srl a
                        ld d, a

                        ld a, (ix+SPRITETABLE_SIZE+SPRITETABLE_X)               ; Load x value
                        and 7                           ; if 0, then we only need to draw 2 cells
                        jr z, CBPX0

                        call AddCell
                        inc de
CBPX0:
                        call AddCell
                        inc de
                        call AddCell

                        pop hl
                        ret

; Inputs: ix - point to spritetable
CommitBallPosition:
                        push hl

                        ld hl, (ix+SPRITETABLE_DATA)
                        ld de, (ix+SPRITETABLE_SCADD)

                        ld a, d                         ; convert high byte of screen address
                        or 0x87                         ; to attr address
                        rra                             
                        rra
                        srl a
                        ld d, a

                        call AddCell

                        ld bc, 32
                        ex de, hl
                        add hl, bc
                        ex de, hl

                        call AddCell

                        ld bc, 31
                        ex de, hl
                        sbc hl, bc
                        ex de, hl

                        call AddCell

                        ld bc, 32
                        ex de, hl
                        add hl, bc
                        ex de, hl

                        call AddCell

                        pop hl
                        ret

DrawVelocity:
                        push bc, de, hl
                        ld de, 0x5800

                        ld b, 32
DVErase:
                        ld a, 56
                        ld (de), a
                        inc de
                        djnz DVErase

                        ld bc, (batvelocity)
                        call absBC

                        ld a, b
                        and a
                        jr z, DVFraction

                        ld de, 0x5800
                        ld a, 8
DVDraw:
                        ld (de), a
                        inc de
                        djnz DVDraw

DVFraction:
                        ld a, c
                        and a
                        jr z, DVFinish

                        ld b, c
                        srl b
                        srl b
                        srl b
                        srl b
                        ld de, 0x5810
                        ld a, 16

DVDrawFraction:
                        ld (de), a
                        inc de
                        djnz DVDrawFraction

DVFinish:
                        pop hl, de, bc
                        ret

