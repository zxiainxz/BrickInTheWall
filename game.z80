GameLoopInitialise:
                        xor a
                        ld (gameinit), a
                        ld hl, lives
                        ld (hl), INITIAL_LIVES                          ; set initial lives

                        call StartLevel

                        ld bc, score_string
                        ld hl, 0x0000
                        call DisplayString
                        call DrawScore

                        ld bc, lives_string
                        ld hl, 0xA300
                        call DisplayString
                        call DrawLives

                        call LoadSprites                                ; Put the sprites this scene uses into the
                                                                        ; sprite table
                        di
                        call DrawAllSprites                             ; Draw the sprites once so the interrupt
                                                                        ; has something to erase                        
                        ei

                        ld a, 1
                        ld (gameinit), a

                        jp InitialiseFinished

MainGameLoop:
                        halt

                        xor a                                           ; clear a to 0 (black)
                        out (#fe), a                                    ; set border to 0

                        call EraseAllSprites

                        ld a, 1
                        out (#fe), a

                        jr GameLoopDraw

GameLoopDrawFinished:


                        call DrawAllSprites                            ; Remove the old sprites

                        ld a, 4
                        out (#fe), a

                        jr GameLoopLogic
                        
GameLoopLogicFinished:

                        ld a, (LevelBlockCount)
                        and a
                        jp z, LevelComplete

                        ld a, (lives)
                        and a
                        jr z, GameOver

                        jr MainGameLoop

GameOver:
                        xor a
                        ld (gameinit), a
                        ld (currentlevel), a                    ; reset the level

                        ld a, GAMEOVER_SCENE                    ; Show the game over scene
                        ld (currentloop), a
                        jp SwitchMainLoop

GameLoopDraw:
                        push ix
                        ld ix, UpdateBricks
                        ld b, 5
GLDrawNextBrick:
                        ld a, (ix+1)
                        and a
                        jp z, GLDrawFinished

                        ld de, (ix+UPDATEBRICKS_ADDR)
                        ld hl, (ix+UPDATEBRICKS_SPRITE)

                        call DrawBrick

                        ld de, (ix+UPDATEBRICKS_ATTRADDR)
                        ld a, 56
                        ld (de), a
                        inc de
                        ld (de), a

                        ld (ix+UPDATEBRICKS_ADDR), 0x00
                        ld (ix+UPDATEBRICKS_ADDR+1), 0x00
                        ld de, UPDATEBRICKS_SIZE
                        add ix, de

                        djnz GLDrawNextBrick

GLDrawFinished:
                        pop ix
                        jp GameLoopDrawFinished

GameLoopLogic:
                        ld a, (gameinit)
                        and a
                        jp z, GameLoopLogicFinished

                        call ProposeBallMove                            ; proposed ball coordinates in hl

                        ld ix, spritetable

                        call CheckLoseBall
                        jp z, LoseLife

                        ld a, 0
                        out (#fe), a

                        call CheckBatCollision

                        ld a, 5
                        out (#fe), a

                        call CheckBrickCollision
                        ld a, 6
                        out (#fe), a

                        call CheckYEdgeCollision
                        call CheckXEdgeCollision

                        ld a, 1
                        out (#fe), a

                        call ReadKeys
                        call UpdateBatPosition
                        call DrawVelocity

                        call CommitBallMove
                        jp GameLoopLogicFinished

LoseLife
                        call ResetBallBat
                        jp GameLoopLogicFinished

LevelComplete:
                        xor a
                        ld (gameinit), a

                        ld a, (currentlevel)
                        inc a
                        ld (currentlevel), a

                        ld a, LEVELCOMPLETE_SCENE
                        ld (currentloop), a
                        jp SwitchMainLoop

StartLevel:
                        xor a                                           ; Stationary ball to start
                        ld (yballdir), a
                        ld (xballdir), a

                        call FadeScreenToWhite
                        call ResetLevel
                        call LoadLevel

                        call DisplayLevel

                        ret

ResetBallBat:
                        ld ix, spritetable

                        ld hl, INITIAL_BALL_COORDS
                        call UpdateSpriteXY
                        ld (proposedbally), hl

                        ld de, SPRITETABLE_SIZE
                        add ix, de

                        ld hl, (ix+SPRITETABLE_Y)
                        ld a, INITIAL_BAT_X
                        ld h, a
                        call UpdateSpriteXY

                        ld hl, NULL
                        ld (yballdir), hl
                        ret

DrawLives:
                        ld a, (lives)
                        and a
                        ret z

                        ld b, a
                        ld hl, 0xCD00
DrawLife:                        
                        call scadd
                        push hl, de

                        ld de, bat16x8Data
                        ld a, h

                        push af

                        and 7

                        ld h, 0
                        ld l, a

                        add hl, hl
                        
                        add hl, de
                        ld a, (hl)
                        inc hl
                        ld h, (hl)
                        ld l, a

                        pop af
                        pop de

                        di
                        call DrawSprite16x8PreShiftCharRow
                        ei
                        pop hl

                        ld d, 17
                        ld e, 0
                        add hl, de

                        djnz DrawLife

                        ret

; Works out where the ball should move to
; Outputs: hl - proposed ball x,y
ProposeBallMove:
                        ld hl, (proposedbally)
                        ld (oldbally), hl

                        ld a, (yballdir)               ; Get ball direction
                        and a
                        jr z, ProposeBallMoveX

                        add l                           ; move ball in that direction
                        ld l, a

                        ld (proposedbally), a

ProposeBallMoveX:
                        ld a, (xballdir)
                        and a
                        ret z

                        add h
                        ld h, a

                        ld (proposedballx), a
                        ret

CommitBallMove:
                        ld hl, (proposedbally)
                        call UpdateSpriteXY
                        ret

; input - ix set to spritetable
CheckLoseBall:
                        ld a, (ix+SPRITETABLE_Y)
                        cp 184                          ; Check if the ball is hitting the bottom
                        ret nz

                        call DrawLives

                        ld hl, lives
                        dec (hl)

                        xor a
                        ld (bonusadder), a              ; Remove any bonus accrued

                        call DrawLives
                        cp a                            ; set z to indicate a loss
                        ret

; LoadSprites - Load the sprite data into the sprite table. Always use index 0 for ball, index 1 for bat
LoadSprites:
                        ld ix, spritetable
                        ld a, 1
                        ld (ix+SPRITETABLE_FLAGS), a

                        ld hl, ball8x8Data
                        ld (ix+SPRITETABLE_PRESHIFT), hl

                        ld hl, INITIAL_BALL_COORDS
                        ld (proposedbally), hl
                        ld (oldbally), hl
                        call UpdateSpriteXY
                        ld (ix+SPRITETABLE_OLD_X), l

                        ld hl, (ix+SPRITETABLE_SCADD)
                        ld (ix+SPRITETABLE_OLD_SCADD), hl
                        ld de, (ix+SPRITETABLE_DATA)
                        ld (ix+SPRITETABLE_OLD_DATA), de

                        ld de, SPRITETABLE_SIZE
                        add ix, de

                        ; bat
                        ld a, 3
                        ld (ix+SPRITETABLE_FLAGS), a

                        ld hl, bat16x8Data
                        ld (ix+SPRITETABLE_PRESHIFT), hl

                        ld hl, INITIAL_BAT_COORDS
                        call UpdateSpriteXY
                        ld (ix+SPRITETABLE_OLD_X), l

                        ld hl, (ix+SPRITETABLE_SCADD)
                        ld (ix+SPRITETABLE_OLD_SCADD), hl
                        ld de, (ix+SPRITETABLE_DATA)
                        ld (ix+SPRITETABLE_OLD_DATA), de

                        ld h, INITIAL_BAT_X
                        ld l, 0
                        ld (ix+SPRITETABLE_X16), hl
                        ld h, INITIAL_BAT_Y
                        ld (ix+SPRITETABLE_Y16), hl

                        ret

; Checks if the bat and ball have collided
; inputs: hl - ball x, y
CheckBatCollision:
                        ld a, (yballdir)
                        cp 1
                        ret nz

                        ld a, l                         ; Check if ball is near bat
                        cp 176                          ; this is when the bottom of the ball crosses the bat line

                        ret c                           ; return if < 176, ball isn't near bat

                        push ix
                        ld de, SPRITETABLE_SIZE
                        add ix, de

                        ld bc, (ix+SPRITETABLE_Y)
                        pop ix

                        call CheckCollision8v16x8v8
                        ret nz

                        xor a
                        ld (bonusadder), a              ; Reset the score bonus when we hit the bat

                        ld a, b
                        add 14
                        ld c, a

                        ld a, b
                        add 2
                        ld b, a

                        ld a, (ix+SPRITETABLE_X)
                        add 4
                        
                        cp b
                        jr c, GoLeft

                        cp c
                        jr nc, GoRight

                        cp a

                        call z, Switch_YDir
                        jr z, Ball_HitY
                        ret

GoLeft:
                        ld a, -1
                        ld (xballdir), a
                        call Ball_HitX

                        call Switch_YDir
                        jr Ball_HitY

GoRight:
                        ld a, 1
                        ld (xballdir), a
                        call Ball_HitX
                        
                        call Switch_YDir
                        jr Ball_HitY

; The ball was hit on the y axis and so it needs to be moved back to the old position moved again
; Outputs: hl - new proposed ball x,y
Ball_HitY:
                        ld a, (oldbally)

                        ld bc, (yballdir)
                        add c

                        ld (proposedbally), a

                        ld hl, (proposedbally)
                        ret

; The ball was hit on the x axis and so it needs to be moved back to the old position moved again
; Outputs: hl - new proposed ball x,y
Ball_HitX:
                        ld a, (oldballx)

                        ld bc, (xballdir)
                        add c

                        ld (proposedballx), a

                        ld hl, (proposedbally)
                        ret

; input: ix - set to spritetable
CheckYEdgeCollision:
                        ld a, (ix+SPRITETABLE_Y)

                        cp 8                            ; Check if the ball is hitting the top
                        call z, Switch_YDir
                        jr z, Ball_HitY
                        ret

; input: ix - set to spritetable
CheckXEdgeCollision:
                        ld a, (ix+SPRITETABLE_X)

                        and a
                        jr nz, CheckRightEdge
                        call Switch_XDir
                        jr Ball_HitX

CheckRightEdge:
                        cp 247
                        ret nz

                        call Switch_XDir
                        jr Ball_HitX
                        ret

Switch_YDir:
                        ld a, (yballdir)                ; Load balldir into a
                        neg                             ; negate direction
                        ld (yballdir), a                ; store new direction
                        cp a                            ; set the z flag to indicate a switch occurred

                        ret

Switch_XDir:
                        ld a, (xballdir)
                        neg
                        ld (xballdir), a
                        cp a

                        ret

ReadKeys:       
                        ld bc, Row_YUIOP
                        in a, (c)

                        rra                               ; check for P
                        jr nc, MoveBatRight              ; move right

                        rra                               ; check for O
                        jr nc, MoveBatLeft

                        ld a, (batvelocitytarget)
                        and a
                        jr z, RK1

                        xor a
                        ld (batvelocitytarget), a

                        ld hl, (batvelocitydelta)
                        sub l                               ; 16bit neg
                        ld l, a
                        sbc a, a
                        sub h
                        ld h, a
                        ld (batvelocitydelta), hl

RK1:
                        ld bc, Row_VCXZShift                                ; Check for c, complete level
                        in a, (c)

                        and 8
                        jr z, CompleteLevel

                        ld bc, Row_SpaceSymMNB                              ; check for <space>, launch ball
                        in a, (c)

                        and 1
                        ret nz

                        ld a, INITIAL_BALL_Y_DIR
                        ld (yballdir), a
                        ld a, INITIAL_BALL_X_DIR
                        ld (xballdir), a
                        ret

CompleteLevel:
                        xor a
                        ld (LevelBlockCount), a
                        ret

MoveBatLeft:
                        ld a, -BAT_VELOCITY_MAX
                        ld (batvelocitytarget), a
                        ld hl, -BAT_VELOCITY_DELTA
                        ld (batvelocitydelta), hl
                        ret

MoveBatRight:
                        ld a, BAT_VELOCITY_MAX
                        ld (batvelocitytarget), a
                        ld hl, BAT_VELOCITY_DELTA
                        ld (batvelocitydelta), hl
                        ret

UpdateBatPosition:
                        ld hl, (batvelocity)
                        ld a, (batvelocitytarget)

                        cp h
                        jr nz, UBP0

                        ld a, l
                        and a
                        jr z, UBP1

UBP0:
                        ld de, (batvelocitydelta)
                        add hl, de
                        ld (batvelocity), hl

UBP1:
                        ld a, h
                        and a
                        jr nz, UBP3

                        ld a, l
                        and a
                        ret z

UBP3:
                        push ix

                        ld ix, spritetable+SPRITETABLE_SIZE
                        ld de, (ix+SPRITETABLE_X16)
                        ex de, hl

                        add hl, de

                        ld a, h
                        cp 241
                        jr c, UBP2

                        ex af, af'
                        xor a
                        ld hl, NULL
                        ld (batvelocity), hl
                        ld (batvelocitydelta), hl
                        ld (batvelocitytarget), a
                        ex af, af'

                        cp 255
                        jr z, UBP2
                        cp 250
                        jr nc, UBP2

                        ld hl, 0xF000

UBP2:
                        ld (ix+SPRITETABLE_X16), hl

                        ld l, (ix+SPRITETABLE_Y)
                        call UpdateSpriteXY

                        ld a, (yballdir)
                        and a
                        call z, MoveBallToBat

                        pop ix
                        ret

MoveBallToBat:
                        ld ix, spritetable

                        ld a, (ix+SPRITETABLE_X+SPRITETABLE_SIZE)
                        add 4

                        ld hl, (ix+SPRITETABLE_Y)
                        ld h, a

                        ld (proposedbally), hl
                        call UpdateSpriteXY

                        ret

DrawVelocity:
                        push bc, de, hl
                        ld de, 0x5800

                        ld b, 32
DVErase:
                        ld a, 56
                        ld (de), a
                        inc de
                        djnz DVErase

                        ld bc, (batvelocity)
                        call absBC

                        ld a, b
                        and a
                        jr z, DVFraction

                        ld de, 0x5800
                        ld a, 8
DVDraw:
                        ld (de), a
                        inc de
                        djnz DVDraw

DVFraction:
                        ld a, c
                        and a
                        jr z, DVFinish

                        ld b, c
                        srl b
                        srl b
                        srl b
                        srl b
                        ld de, 0x5810
                        ld a, 16

DVDrawFraction:
                        ld (de), a
                        inc de
                        djnz DVDrawFraction

DVFinish:
                        pop hl, de, bc
                        ret

absBC:
     bit 7,b
     ret z
     xor a 
     sub c 
     ld c,a
     sbc a,a 
     sub b 
     ld b,a
     ret