        DEVICE ZXSPECTRUM48                     ; sjasmplus directive for SAVESNA at end
        SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
Stack_Top:              EQU 0xFFF0
IM2_Table:              EQU 0xFE00
IM2_Jmp:                EQU 0xFDFD
Code_Start:             EQU 0x7FFD

                        ORG Code_Start

                        jp Main_Start                   ; skip any includes

                        include "constants.z80"
                        include "data.z80"
                        include "fontutils.z80"
                        include "game.z80"
                        include "gameover.z80"
                        include "leveldata.z80"
                        include "levelintroscene.z80"
                        include "levelcompletescene.z80"
                        include "levelutils.z80"
                        include "mathutils.z80"
                        include "random.z80"
                        include "scoreutils.z80"
                        include "screenutils.z80"
                        include "spriteutils.z80"
                        include "startscreen.z80"

Main_Start:
; LOGPOINT Started
                        xor a                                           ; clear a to 0 (black)
                        out (#fe), a                                    ; set border to 0

                        call InitialiseInterrupt                        ; Switch to interrupts

SwitchMainLoop:
                        ld h, 0                                         ; Put current loop index into hl
                        ld a, (currentloop)
                        ld l, a                                         
                        add hl, hl                                      ; double it
                        ld de, initialisers                             ; load the initialisers table
                        add hl, de                                      ; point to the current loop initialiser
                        ld a, (hl)                                      ; load the address in the table into hl
                        inc hl
                        ld h, (hl)
                        ld l, a

                        jp (hl)                                         ; jump to it

InitialiseFinished:                                                     ; return label for initialisers
                        ld h, 0                                         ; get the current loop index again
                        ld a, (currentloop)
                        ld l, a
                        add hl, hl

                        ld de, mainloops                                ; this time load the mainloops table
                        add hl, de
                        ld a, (hl)
                        inc hl
                        ld h, (hl)
                        ld l, a

                        jp (hl)                                         ; jump to the initialiser

                        ; execution now continues inside the mainloop
                        ; when the mainloop has finished it updates currentloop and jumps to SwitchMainLoop

InitialiseInterrupt:
                        di                                              ; disable interrupts
                        ld hl, Interrupt                                ; Load address of interrupt routine
                        ld ix, 0xfff0                                   ; Setup the jr at fff4
                        ld (ix+04h), 0xc3                               ; jp opcode
                        ld (ix+05h), l                                  ; load address of interrupt routine
                        ld (ix+06h), h
                        ld (ix+0fh), 0x18                               ; jr opcode at ffff
                        ld a, 0x39                                      ; point the interrupt register at
                        ld i, a                                         ; the 257 bytes of FFFF in the ZX 48 Rom
                        im 2                                            ; switch to IM 2
                        ei                                              ; Turn on interrupts again

; Timing debugging colours
; black: Erase sprites
; blue: Initialise draw routine
; red: redraw bricks
; magenta: Redraw sprites
; green: brick collision
; cyan: brick collision
; yellow: other collisions
; white: game loop complete

Interrupt:
                        di                                              ; Disable interrupts
                        push af                                         ; Push everything to the stack
                        push bc
                        push de
                        push hl
                        push ix
                        exx
                        ex af, af'
                        push af
                        push bc
                        push de
                        push hl
                        push iy

                        xor a                                           ; clear a to 0 (black)
                        out (#fe), a                                    ; set border to 0

                        call EraseAllSprites                            ; Remove the old sprites
                                                                        ; FIXME: Might be nice to cache this for speed
                        ld h, 0
                        ld a, (currentloop)
                        ld l, a                                         
                        add hl, hl                                      ; double it
                        ld de, interruptdraw                            ; load the interrupt draw table
                        add hl, de                                      ; point to the current draw
                        ld a, (hl)                                      ; load the address in the table into hl
                        inc hl
                        ld h, (hl)
                        ld l, a

                        ld a, h
                        cp 0
                        jr z, InterruptDrawFinished

                        ld a, 2
                        out (#fe), a
                        jp (hl)                                         ; jump to it

InterruptDrawFinished:

                        ld a, 3
                        out (#fe), a

                        call DrawAllSprites                             ; Draw the new sprites

                        ld a, 4
                        out (#fe), a

                        pop iy                                          ; pop it all back off the stack
                        pop hl
                        pop de
                        pop bc
                        pop af
                        exx
                        ex af,af'
                        pop ix
                        pop hl
                        pop de
                        pop bc
                        pop af
                        ei                                              ; enable interrupts again
                        ret

SwitchState:
                        ret

Code_Length:            EQU $-Code_Start + 1
        SAVESNA "main.sna", Code_Start
        SAVETAP "main.tap", Code_Start