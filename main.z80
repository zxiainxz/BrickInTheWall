        DEVICE ZXSPECTRUM48                     ; sjasmplus directive for SAVESNA at end

Stack_Top:              EQU 0xFFF0
IM2_Table:              EQU 0xFE00
IM2_Jmp:                EQU 0xFDFD
Code_Start:             EQU 0x7FFD

                        ORG Code_Start

                        jp Main_Start                   ; skip any includes

                        include "constants.z80"
                        include "data.z80"
                        include "screenutils.z80"
                        include "spriteutils.z80"
                        include "levelutils.z80"
                        include "mathutils.z80"

Main_Start:
                        xor a                           ; clear a to 0 (black)
                        out (#fe), a                    ; set border to 0

                        call GenerateLevel
                        call DisplayLevel

                        call DrawAllSprites

                        call InitialiseInterrupt                        ; Switch to interrupts

Main_Loop:

                        ld b, 1                                         ; number of halt instructions
Wait_Timer:
                        halt                                            ; Wait
                        djnz Wait_Timer

                        call Move_BallY
                        call Move_BallX

                        call ReadKeys

                        call CheckBatCollision

                        ld hl, (ycoord)
                        call CheckBrickCollision

                        call CheckYEdgeCollision

                        call CheckXEdgeCollision

                        jr Main_Loop

InitialiseInterrupt:
                        di
                        ld hl, Interrupt
                        ld ix, 0xfff0
                        ld (ix+04h), 0xc3
                        ld (ix+05h), l
                        ld (ix+06h), h
                        ld (ix+0fh), 0x18
                        ld a, 0x39
                        ld i, a
                        im 2
                        ei

Interrupt:
                        di
                        push af
                        push bc
                        push de
                        push hl
                        push ix
                        exx
                        ex af, af'
                        push af
                        push bc
                        push de
                        push hl
                        push iy

                        ld a, 2
                        out (#fe), a                                    ; red border

                        call EraseAllSprites
                        
                        call DrawAllSprites

                        pop iy
                        pop hl
                        pop de
                        pop bc
                        pop af
                        exx
                        ex af,af'
                        pop ix
                        pop hl
                        pop de
                        pop bc
                        pop af
                        ei
                        ret

Ball_Hit:
                        call Ball_HitY
                        call Ball_HitX
                        ret

Ball_HitY:
                        call Move_BallY
                        call Move_BallY
                        ret

Ball_HitX:
                        call Move_BallX
                        call Move_BallX
                        ret

CheckBatCollision:
                        ld hl, (ycoord)                 ; ball in hl

                        ld a, l                         ; Check if ball is near bat
                        cp 177                          ; this is when the bottom of the ball crosses the bat line

                        ret c                           ; return if < 177, ball isn't near bat

                        push bc
                        ld bc, (baty)

                        call CheckCollision8v16x8v8

                        pop bc
                        call z, Switch_YDir
                        jr z, Ball_HitY
                        ret

CheckYEdgeCollision:
                        ld a, (ycoord)

                        cp 255                            ; Check if the ball is hitting the top
                        jr z, Switch_YDir

                        cp 184                          ; Check if the ball is hitting the bottom
                        call z, Switch_YDir               ; Lose a life
                        jr z, Ball_HitY
                        ret

CheckXEdgeCollision:
                        ld a, (xcoord)

                        cp 0
                        jr z, Switch_XDir

                        cp 247
                        call z, Switch_XDir
                        jr z, Ball_HitX
                        ret

Move_BallY:
                        ld a, (ycoord)                  ; Get Y coord
                        ld (oldycoord), a

                        ld bc, (yballdir)               ; Get ball direction
                        add c                           ; move ball in that direction

                        ld (ycoord), a                  ; set the new y coord
                        ret

Move_BallX:
                        ld a, (xcoord)
                        ld (oldxcoord), a

                        ld bc, (xballdir)
                        add c
                        ld (xcoord), a

                        ret

Check_YCollision:
                        ld a, (ycoord)

                        cp 255                            ; Check if the ball is hitting the top
                        jr z, Switch_YDir

                        cp 184                          ; Check if the ball is hitting the bottom
                        jr z, Switch_YDir               ; Lose a life

                        push bc
                        ld hl, (ycoord)                 ; ball in hl
                        ld bc, (baty)

                        call CheckCollision8v16x8v8

                        pop bc
                        jr z, Switch_YDir

                        ld hl, (ycoord)
                        call pixelattradd
                        ld a, (de)
                        cp 56
                        jr z, Check_YBelow
                        call RemoveBrick
                        jr Switch_YDir

Check_YBelow
                        ld a, l
                        add 8
                        ld l, a
                        call pixelattradd
                        ld a, (de)
                        cp 56
                        jr z, No_YHit
                        call RemoveBrick
                        jr Switch_YDir

No_YHit
                        or 1                            ; Clear the z flag to indicate no hit
                        ret

Switch_YDir:
                        ld a, (yballdir)                ; Load balldir into a
                        neg                             ; negate direction
                        ld (yballdir), a                ; store new direction
                        cp a                            ; set the z flag to indicate a switch occurred

                        ret

Switch_XDir:
                        ld a, (xballdir)
                        neg
                        ld (xballdir), a
                        cp a

                        ret


Check_XCollision:
                        ld hl, (ycoord)
                        call pixelattradd
                        ld a, (de)
                        cp 56
                        jr z, Check_XRight

                        call RemoveBrick
                        jr Switch_XDir

Check_XRight
                        ld a, h
                        add 8
                        ld h, a
                        call pixelattradd
                        ld a, (de)
                        cp 56
                        jr z, Check_XWalls

                        call RemoveBrick
                        jr Switch_XDir

Check_XWalls
                        ld a, (xcoord)

                        cp 248
                        jr z, Switch_XDir

                        or a                                    ; compare a to 0 but faster than cp 0
                                                                ; but modifies a
                        jr z, Switch_XDir

                        ret

ReadKeys:       
                        ld bc, Row_YUIOP
                        in a, (c)

                        rra                               ; check for P
                        push af
                        jr nc, Move_BatRight              ; move right

                        pop af
                        rra                               ; check for O
                        jr nc, Move_BatLeft
Move_Done:
                        ret

Move_BatLeft:
                        ld a, (batx)

                        cp 0
                        jr z, Move_Done

                        ld (oldbatx), a
                        sub 3

                        ld (batx), a

                        jr Move_Done

Move_BatRight:
                        ld a, (batx)

                        cp 240
                        jr z, Move_BatRightDone

                        ld (oldbatx), a
                        add 3

                        ld (batx), a

Move_BatRightDone
                        pop af
                        jr Move_Done

Code_Length:            EQU $-Code_Start + 1
        SAVESNA "main.sna", Code_Start