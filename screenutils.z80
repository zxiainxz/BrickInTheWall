; scadd - calculate the screen address
; inputs: h - x coordinate
;         l - y coordinate
; outputs: address in de
scadd:                  
                        push af

                        ld a, l
                        ; ld e, a                 ; store y in e

                        ; find line within cell

                        and 7                   ; lime 0-7 within char square
                        add a, 64               ; 64 * 256 = 16384 = start of screen display
                        ld d, a                 ; line * 256

                        ; find wgich third of the screen we're in

                        ld a, l                 ; restore y coord
                        and 192                 ; segment 0, 1 or 2 multiplied by 64
                        rrca                    ; divide this by 8
                        rrca
                        rrca                    ; segment 0-2 multiplied by 8
                        add a, d                ; add to d to give segment start address
                        ld d, a

                        ; find character cell within segment

                        ld a, l                 ; 8 char cells per segment
                        rlca                    ; divide y by 8 & multiply by 32
                        rlca                    ; net calculation: multiply by 4
                        and 224                 ; mask off bits we don't want
                        ld e, a                 ; vertical coordinate calculation done

                        ; add horizontal element

                        ld a, h
                        rrca                    ; only need to dovode by 8
                        rrca
                        rrca
                        and 31                  ; squares 0 - 31 across screen
                        add a, e                ; add to total so far
                        ld e, a                 ; de = screen address

                        pop af
                        
                        ret

; nextrow - calculates the screen address of the next row
; inputs: a  - y coordinate of the current row
;         de - screen address of the current row
; outputs: de - the address of the next row
;          a - new y coord
nextrow:
                        push hl                 ; save hl
                        ld hl, de               ; move screen address into hl

                        inc a                   ; move to next row
                        push af

                        and 63                  ; are we moving to the next third of the screen
                        jr z, nextthird
                        and 7                   ; are we moving to the next character
                        jr z, nextchar
                        ;dec hl                  ; left two bytes
                        ;dec l                   ; not straddling 256-byte boundary
                        inc h                   ; next row of this character cell
nextrowdone:
                        ld de, hl               ; move new screen address back into de

                        pop af
                        pop hl                  ; restore hl
                        ret

nextthird:
                        ld de, 32               ; next segment is 32 bytes on
                        add hl, de              ; add to the screen address
                        jr nextrowdone

nextchar:
                        ld de, 63776            ; minus 1760
                        add hl, de              ; subtract 1760 from screen address
                        jr nextrowdone

; atadd - get the attribute address
; inputs: hl - x, y coordinates in character space
; outputs: de - attribute address
atadd:
                        push af                 ; protect af

                        ld a, l                 ; load y coord into a
                        rrca                    ; * 32
                        rrca
                        rrca
                        ld e, a                 ; store y * 32 into e
                        and 3                   ; mask the bits for moving into high byte
                        add a, 88               ; 88 * 256 = 22528 = ATTR_BASE
                        ld d, a                 ; move to d (*256)
                        ld a, e                 ; put y * 32 back into a
                        and 224                 ; mask low byte
                        ld e, a                 ; store into e
                        ld a, h
                        add a, e                ; add x coord to low byte
                        ld e, a                 ; store into e

                        pop af                  ; restore af
                        ret

; pixelattradd - get the attribute address of a given pixel
; inputs: hl - x, y coordinates in pixel space
; outputs: de - attribute address
pixelattradd:
                        push hl

                        srl h                    ; divide x and y by 8
                        srl h                    ; to get them into character space
                        srl h
                        srl h
                        sla h
                        srl l
                        srl l
                        srl l

                        call atadd

                        pop hl
                        ret
