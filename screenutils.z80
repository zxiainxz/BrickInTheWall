; scadd - calculate the screen address
; inputs: h - x coordinate
;         l - y coordinate
; outputs: address in de
scadd:                  
                        ex af, af'

                        ld a, l
                        ; ld e, a                 ; store y in e

                        ; find line within cell

                        and 7                   ; lime 0-7 within char square
                        add a, 64               ; 64 * 256 = 16384 = start of screen display
                        ld d, a                 ; line * 256

                        ; find which third of the screen we're in

                        ld a, l                 ; restore y coord
                        and 192                 ; segment 0, 1 or 2 multiplied by 64
                        rrca                    ; divide this by 8
                        rrca
                        rrca                    ; segment 0-2 multiplied by 8
                        add a, d                ; add to d to give segment start address
                        ld d, a

                        ; find character cell within segment

                        ld a, l                 ; 8 char cells per segment
                        rlca                    ; divide y by 8 & multiply by 32
                        rlca                    ; net calculation: multiply by 4
                        and 224                 ; mask off bits we don't want
                        ld e, a                 ; vertical coordinate calculation done

                        ; add horizontal element

                        ld a, h
                        rrca                    ; only need to dovode by 8
                        rrca
                        rrca
                        and 31                  ; squares 0 - 31 across screen
                        add a, e                ; add to total so far
                        ld e, a                 ; de = screen address

                        ex af, af'
                        
                        ret

; NextRow2: get the next row
; Inputs:  de - current screen address
; Outputs: de - new screen address
; Trashes: af
NextRow2:                                                       ; Better than nextrow
                        inc d
                        ld a, d
                        and 0x07
                        ret nz

                        ld a, e
                        add a, 32
                        ld e, a
                        ret c

                        ld a, d
                        sub 8
                        ld d, a

                        ret

NextCharRow:
                        ld a, e
                        add a, 32
                        ld e, a

                        ret nc

                        add d, 8
                        ld d, a
                        
                        ret

; atadd - get the attribute address
; inputs: hl - x, y coordinates in character space
; outputs: de - attribute address
atadd:
                        push af                 ; protect af

                        ld a, l                 ; load y coord into a
                        rrca                    ; * 32
                        rrca
                        rrca
                        ld e, a                 ; store y * 32 into e
                        and 3                   ; mask the bits for moving into high byte
                        add a, 88               ; 88 * 256 = 22528 = ATTR_BASE
                        ld d, a                 ; move to d (*256)
                        ld a, e                 ; put y * 32 back into a
                        and 224                 ; mask low byte
                        ld e, a                 ; store into e
                        ld a, h
                        add a, e                ; add x coord to low byte
                        ld e, a                 ; store into e

                        pop af                  ; restore af
                        ret

; pixelattradd - get the attribute address of a given pixel
; inputs: hl - x, y coordinates in pixel space
; outputs: de - attribute address
pixelattradd:
                        push hl

                        srl h                    ; divide x and y by 8
                        srl h                    ; to get them into character space
                        srl h
                        srl h
                        sla h
                        srl l
                        srl l
                        srl l

                        call atadd

                        pop hl
                        ret


ClearScreen:
                        ld hl, $4000
                        ld de, $4001
                        ld bc, 6144
                        ld (hl), l
                        ldir

                        ld a, 56
                        ld bc, 767
                        ld (hl), a
                        ldir
                        ret

ClearAttrs:
                        ld hl, $5800
                        ld de, $5801
                        ld a, 56
                        ld bc, 767
                        ld (hl), a
                        ldir
                        ret

; a - attr value
ClearPlayfield:
                        ld hl, $5820
                        ld de, $5821
                        ld bc, 767 - 32
                        ld (hl), a
                        ldir
                        ret
                        
FadeScreenToWhite:
                        call ClearAttrs
                        ld bc, 0x0400
ClearCharRow:

                        ld a, 23
ClearNextCharRow:
                        push af
                        
                        add a
                        add a
                        add a

                        add c

                        ld h, 0
                        ld l, a

                        call scadd
                        call ClearRow

                        ld a, l
                        add a, b
                        add a, b
                        dec a
                        ld l, a

                        call scadd
                        call ClearRow

                        pop af

                        dec a
                        cp 255
                        jr nz, ClearNextCharRow
        .5              halt

                        inc c
                        djnz ClearCharRow

                        ret

ClearRow
                        ex af, af'
                        xor a

                        dup 32
                        ld (de), a
                        inc de
                        edup

                        ex af, af'

                        ret

; Fast copy the whole of the back buffer to the screen
CopyBackBufferToScreen:
                        di                              ; messes with stack

                        ld (CBBTS_SP+1), sp             ; store original stack

                        ld hl, BACKBUFFER_BASE          ; hl points to buffer
                        exx
                        ld hl, SCREEN_BASE              ; hl' points to screen
CBBTS_NextLine:
                        exx

                        ld sp, hl                       ; point stack at the back buffer

                        pop af, bc, de, ix              ; load 8 bytes from back buffer

                        exx
                        ex af, af'

                        ld de, 16                       ; move screen pointer on 16 bytes
                        add hl, de

                        pop af, bc, de, iy              ; load another 8 bytes from back buffer

                        ld (CBBTS_BUFFER1+1), sp        ; store current buffer position for later

                        ld sp, hl                       ; point stack at screen
                        push iy, de, bc, af             ; push 8 bytes

                        ex af, af'
                        exx

                        push ix, de, bc, af             ; push next 8 bytes

CBBTS_BUFFER1:
                        ld hl, 0                        ;
                        ld sp, hl                       ; restore stack to buffer

                        pop af, bc, de, ix              ; load next 8 bytes
                        exx
                        ex af, af'

                        ld de, 16
                        add hl, de                      ; move screen on 16bytes

                        pop af, bc, de, iy              ; load next 8 bytes

                        ld (CBBTS_BUFFER2+1), sp        ; store buffer position
                        ld sp, hl                       ; point stack at screen

                        push iy, de, bc, af             ; push 8 bytes

                        ex af, af'
                        exx

                        push ix, de, bc, af             ; push next 8 bytes

CBBTS_BUFFER2:
                        ld hl, 0                        ; restore buffer position
                        exx

CBBTS_SCREEN1:
                        ld a, h
                        cp SCREEN_END_HIGH              ; check that buffer hasn't hit the end
                        jr nz, CBBTS_NextLine           ; do next 32 bytes
                        
CBBTS_SP:               ld sp, 0                        ; restore stack
                        exx                             

                        ei                              ; restore interrupts
                        ret

; Draws the background to the back buffer, skipping the first char row
; Inputs: hl - background data, 16x16, linear
DrawBackground:
                        di                          ; messes with the stack, so disable interrupts

                        ld (DB_SP+1), sp            ; store stack
                        ld (DB_Reset+1), hl         ; store start of data
                        ld b, 16                    ; height of background, could be param
                        exx                         ; switch to shadow
                        ld hl, BACKBUFFER_BASE + 32 ; set backbuffer, skip 2 char row
                        ; ld hl, SCREEN_BASE + 32
DB_NextLine:
                        exx                         ; switch to standard

                        ld sp, hl                   ; load background to stack

                        pop ix                      ; take two bytes

                        inc hl                      ; skip over those two bytes
                        inc hl

                        dec b                       ; dec counter
                        jr nz, DB_NoReset

DB_Reset:               ld hl, 0                    ; reset hl to start of data
                        ld b, 16                    ; reset counter
DB_NoReset:

                        exx                         ; switch to shadow

                        ld (DB_Screen_HL+1), hl     ; store start of row

                        ld de, 32
                        add hl, de                  ; skip 32 bytes to the end of the row

                        ld sp, hl                   ; set stack to end of row

        .16             push ix                     ; push bg bytes across whole of the row

DB_Screen_HL:           ld hl, 0                    ; restore the start of the row

                        inc h                       ; find the next row
                        ld a, h
                        and 0x07
                        jr nz, DB_NextLine

                        ld a, h
                        sub 8
                        ld h, a
                        ld a, l
                        add a, 32
                        ld l, a
                        jr nc, DB_NextLine

                        ld a, h
                        add a, 8
                        ld h, a

                        cp BACKBUFFER_END_HIGH      ; stop if we're outside the buffer
                        ; cp SCREEN_END_HIGH
                        jp nz, DB_NextLine

DB_SP:                  ld sp, 0                    ; restore stack
                        exx                         ; back to normal registers

                        ei                              ; restore interrupts again
                        
                        ret

DisplayBorder:
                        ld hl, BACKBUFFER_BASE + 32

                        ld b, 8

                        ld de, bordertData0

DisplayBorderTopLine:
                        push hl
                        ld a, (de)

                        dup 32
                        ld (hl), a
                        inc hl
                        edup

                        pop hl
                        inc h
                        inc de

                        djnz DisplayBorderTopLine

                        ret

; Inputs: hl - background
;          e - attr low byte
; Outputs: hl - background with offset
; y - presense of 32 bit
; x - presense of 1 bit
; 5800 - 00 - 0 -    00000000
; 5820 - 20 - 32 -   00100000
; 5840 - 40 - 64 -   01000000
; 5860 - 60 - 96 -   01100000
; 5880 - 80 - 128 -  10000000
; 58a0 - a0 - 160 -  10100000
;      - c0 - 192 -  11000000
;      - e0 - 224 -  11100000
;
;   01
;   23
;
; y * 2 + x
GetBGForCell:
                        ld a, e                 ; load low attr byte
                        and 1                   ; set the x value
                        bit 5, e                ; check the y bit in e
                        jr nz, GBGFC1           
                        or 2                    ; if present, set the second bit in a
GBGFC1:
                        sla a                   ; multiple by 8 to get byte offset
                        sla a
                        sla a
                        ld d, 0
                        ld e, a
                        add hl, de              ; hl points at the correct part of background

                        ret

; Add a background cell that doesn't need anything composited over it
; it just marks that cell for updating and copies the backbuffer as data
; inputs: de - cell address
AddBGCell:
                        ld a, 5
                        out (0xfe), a

                        push de, hl

                        ld hl, UsedCellMap - ATTR_BASE
                        add hl, de                      ; Get the cell position

                        ld a, (hl)                      ; Check if it's already in use
                        cp 255
                        jp nz, AddBGCellComplete
                                                        ; Get a new cell
                        ld a, (DrawCellCount)           ; Check if there is one free
                        cp MAX_CELLS
                        jp nc, AddBGCellComplete        ; None left
                        ld (hl), a                      ; record the new cell in the map
                        inc a                           ; increase the count
                        ld (DrawCellCount), a           ; update the count

                        push de                         ; Record new cell in used cell list
                        ex de, hl                       ; swap de&hl - de now points to offset in UsedCellMap
                        ld hl, (UsedCellListNext)       ; Store offset to UsedCellMap in UsedCellList
                        ld (hl), e
                        inc hl
                        ld (hl), d
                        inc hl
                        ld (UsedCellListNext), hl       ; Update the list
                        pop de                          ; restore de to attribute addr

                        ; Fill in new cell record
                        ld hl, (DrawCellListNext)
                        ld (hl), e                      ; Store attribute addr
                        inc hl
                        ld (hl), d
                        inc hl
                        inc hl

                        ld a, d                         ; convert the highbyte of attr addr to screen addr
                        add a
                        add a
                        add a
                        and d
                        ld (hl), a                      ; store high byte
                        inc hl

                        push hl
                        ld h, a                         ; hl is screen address
                        ld l, e

                        ld de, ScreenBuffer - SCREEN_BASE       ; offset between screen address and buffer
                        add hl, de                              ; get address in buffer

                        pop de                                  ; de - DrawCell address

                        dup 7
                        ld a, (hl)
                        ld (de), a
                        inc de
                        inc h
                        edup
                        ld a, (hl)
                        ld (de), a
                        inc de

                        ld (DrawCellListNext), de

AddBGCellComplete:
                        pop hl, de

                        ld a, 1
                        out (0xfe), a

                        ret

; hl - sprite data
; de - attr address

; returns - hl + 8
AddCell:
                        ld a, 4
                        out (0xfe), a

                        push bc, de, hl

                        exx
                        pop hl
                        exx

                        ld hl, UsedCellMap - ATTR_BASE
                        add hl, de                      ; Get the cell position

                        ld a, (hl)                      ; Check if it's already in use
                        cp 255
                        jp nz, ACCompositeCell
                                                        ; Get a new cell
                        ld a, (DrawCellCount)           ; Check if there is one free
                        cp MAX_CELLS
                        jp nc, ACFull                   ; None left
                        ld (hl), a                      ; record the new cell in the map
                        inc a                           ; increase the count
                        ld (DrawCellCount), a           ; update the count

                        push de                         ; Record new cell in used cell list
                        ex de, hl                       ; swap de&hl - de now points to offset in UsedCellMap
                        ld hl, (UsedCellListNext)       ; Store offset to UsedCellMap in UsedCellList
                        ld (hl), e
                        inc hl
                        ld (hl), d
                        inc hl
                        ld (UsedCellListNext), hl       ; Update the list
                        pop de                          ; restore de to attribute addr

                        ; Fill in new cell record
                        ld hl, (DrawCellListNext)
                        ld (hl), e                      ; Store attribute addr
                        inc hl
                        ld (hl), d
                        inc hl
                        inc hl

                        ld a, d                         ; convert the highbyte of attr addr to screen addr
                        add a
                        add a
                        add a
                        and d
                        ld (hl), a                      ; store high byte
                        inc hl

                        push hl
                        ld h, a
                        ld l, e

                        ld de, ScreenBuffer - SCREEN_BASE       ; offset between screen address and buffer
                        add hl, de                              ; get address in buffer

                        pop de                                  ; de - DrawCell address

                        dup 7
                        ld a, (hl)                              ; background cell

                        exx
                        and (hl)                                ; and the mask
                        inc hl
                        or (hl)                                 ; or the sprite
                        inc hl
                        exx

                        ld (de), a                              ; write it into the cell
                        inc de
                        inc h
                        edup

                        ld a, (hl)                              ; background
                        exx
                        and (hl)                                ; mask
                        inc hl
                        or (hl)                                 ; sprite
                        inc hl

                        push hl                                 ; push the end of the sprite data to the stack
                        exx

                        ld (de), a                              ; write to the cell
                        inc de

                        ld (DrawCellListNext), de

                        pop hl                                  ; retrieve the end of the sprite data from stack

                        pop de, bc

                        ld a, 1
                        out (0xfe), a

                        ret

ACCompositeCell:
                        ld h, 0                         ; a * 12
                        ld l, a
                        add hl, hl
                        add hl, hl
                        ld d, h
                        ld e, l
                        add hl, hl
                        add hl, de

                        ld de, DrawCellList + 4
                        add hl, de

                        ex hl, de

                        exx
                        push hl
                        exx
                        pop hl

                        dup 7
                        ld a, (de)
                        and (hl)
                        inc hl
                        or (hl)
                        ld (de), a
                        inc hl
                        inc de
                        edup

                        ld a, (de)
                        and (hl)
                        inc hl
                        or (hl)
                        ld (de), a
                        inc hl

                        pop de, bc
                        ld a, 1
                        out (0xfe), a

                        ret

ACFull:
                        pop de, bc

                        ld a, 1
                        out (0xfe), a

                        ret


ClearCells:
                        ld a, (DrawCellCount)                   ; how many draw cells?
                        and a
                        ret z                                   ; 0? ret

                        ld b, a
                        ld hl, UsedCellList
                        ld a, 255

CCClearUsedCell:
                        ld e, (hl)
                        inc hl
                        ld d, (hl)
                        inc hl
                        ld (de), a

                        djnz CCClearUsedCell

                        ld a, (DrawCellCount)
                        ld b, a

                        ld hl, DrawCellList

                        ld de, ClearCellList

CCClearCell:
                        dup 3
                        ld a, (hl)                              ; Copy cell data to ClearCellList
                        ld (de), a
                        inc de
                        inc hl
                        edup

                        ld a, (hl)
                        ld (de), a
                        inc de

                        push de

                        ld de, 9                                ; move DrawCell past data
                        add hl, de

                        pop de

                        djnz CCClearCell                

                        ld a, (DrawCellCount)
                        ld (ClearCellCount), a

                        xor a
                        ld (DrawCellCount), a

                        ld hl, UsedCellList
                        ld (UsedCellListNext), hl

                        ret

