; Sprites

ball8x8Data:            dw ball8x8Data0, ball8x8Data1, ball8x8Data2, ball8x8Data3, ball8x8Data4, ball8x8Data5, ball8x8Data6, ball8x8Data7
ball8x8Data0: db 0, 0, 0, 0, 0, 0, 0, 0,  24, 102, 82, 161, 129, 66, 102, 24,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
ball8x8Data1: db 0, 0, 0, 0, 0, 0, 0, 0,  12, 51, 41, 80, 64, 33, 51, 12,      0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 128, 128, 0, 0, 0
ball8x8Data2: db 0, 0, 0, 0, 0, 0, 0, 0,  6, 25, 20, 40, 32, 16, 25, 6,        0, 0, 0, 0, 0, 0, 0, 0,  0, 128, 128, 64, 64, 128, 128, 0
ball8x8Data3: db 0, 0, 0, 0, 0, 0, 0, 0,  3, 12, 10, 20, 16, 8, 12, 3,         0, 0, 0, 0, 0, 0, 0, 0,  0, 192, 64, 32, 32, 64, 192, 0
ball8x8Data4: db 0, 0, 0, 0, 0, 0, 0, 0,  1, 6, 5, 10, 8, 4, 6, 1,             0, 0, 0, 0, 0, 0, 0, 0,  128, 96, 32, 16, 16, 32, 96, 128
ball8x8Data5: db 0, 0, 0, 0, 0, 0, 0, 0,  0, 3, 2, 5, 4, 2, 3, 0,              0, 0, 0, 0, 0, 0, 0, 0,  192, 48, 144, 8, 8, 16, 48, 192
ball8x8Data6: db 0, 0, 0, 0, 0, 0, 0, 0,  0, 1, 1, 2, 2, 1, 1, 0,              0, 0, 0, 0, 0, 0, 0, 0,  96, 152, 72, 132, 4, 8, 152, 96
ball8x8Data7: db 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 1, 1, 0, 0, 0,              0, 0, 0, 0, 0, 0, 0, 0,  48, 204, 164, 66, 2, 132, 204, 48
ballspacing:  db 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0

bat16x8Data:  dw bat16x8Data0, bat16x8Data1, bat16x8Data2, bat16x8Data3, bat16x8Data4, bat16x8Data5, bat16x8Data6, bat16x8Data7
bat16x8Data0: db 63, 68, 155, 183, 168, 137, 72, 63, 252, 34, 217, 237, 21, 145, 18, 252, 0, 0, 0, 0, 0, 0, 0, 0
bat16x8Data1: db 31, 34, 77, 91, 84, 68, 36, 31, 254, 17, 236, 246, 10, 200, 9, 254, 0, 0, 128, 128, 128, 128, 0, 0
bat16x8Data2: db 15, 17, 38, 45, 42, 34, 18, 15, 255, 8, 246, 251, 5, 100, 4, 255, 0, 128, 64, 64, 64, 64, 128, 0
bat16x8Data3: db 7, 8, 19, 22, 21, 17, 9, 7, 255, 132, 123, 253, 2, 50, 2, 255, 128, 64, 32, 160, 160, 32, 64, 128
bat16x8Data4: db 3, 4, 9, 11, 10, 8, 4, 3, 255, 66, 189, 126, 129, 153, 129, 255, 192, 32, 144, 208, 80, 16, 32, 192
bat16x8Data5: db 1, 2, 4, 5, 5, 4, 2, 1, 255, 33, 222, 191, 64, 76, 64, 255, 224, 16, 200, 104, 168, 136, 144, 224
bat16x8Data6: db 0, 1, 2, 2, 2, 2, 1, 0, 255, 16, 111, 223, 160, 38, 32, 255, 240, 136, 100, 180, 84, 68, 72, 240
bat16x8Data7: db 0, 0, 1, 1, 1, 1, 0, 0, 127, 136, 55, 111, 80, 19, 144, 127, 248, 68, 178, 218, 42, 34, 36, 248
; left = 8
; right = 4
; top = 2
; bottom = 1

brickTable: dw brickoutlineDataBlank, brickoutlineDataBottom, brickoutlineDataTop, brickoutlineDataTopBottom, brickoutlineDataRight, brickoutlineDataBottomRight, brickoutlineDataTopRight, brickoutlineDataTopBottomRight, brickoutlineDataLeft, brickoutlineDataBottomLeft, brickoutlineDataTopLeft, brickoutlineDataTopBottomLeft, brickoutlineDataLeftRight, brickoutlineDataBottomLeftRight, brickoutlineDataTopLeftRight, brickoutlineDataTopBottomLeftRight, brickData

brickData: db 255, 254, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 0, 0

brickoutlineDataBlank: db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

brickoutlineDataTop:   db 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ; 2
brickoutlineDataBottom: db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255 ; 1
brickoutlineDataLeft:   db 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128 ; 8
brickoutlineDataRight:  db 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 ; 4

brickoutlineDataTopBottom: db 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255; 3
brickoutlineDataTopLeft: db 255, 255, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0 ; 10
brickoutlineDataTopRight: db 255, 255, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 ; 6

brickoutlineDataBottomLeft: db 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 255, 255 ; 9
brickoutlineDataBottomRight: db 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 255, 255 ; 5

brickoutlineDataTopBottomLeft: db 255, 255, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 255, 255 ; 11
brickoutlineDataTopBottomRight: db 255, 255, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 255, 255; 7

brickoutlineDataLeftRight: db 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1 ; 12
brickoutlineDataTopLeftRight: db 255, 255, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1 ; 14
brickoutlineDataBottomLeftRight: db 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 255, 255 ; 13
brickoutlineDataTopBottomLeftRight: db 255, 255, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 255, 255 ; 15

bg116x16Data0: db 128, 1, 96, 6, 28, 56, 3, 192, 32, 4, 64, 2, 1, 128, 2, 64, 2, 64, 1, 128, 64, 2, 32, 4, 3, 192, 28, 56, 96, 6, 128, 1

LevelBlockCount:        db 0

UPDATEBRICKS_SIZE       EQU 6
UPDATEBRICKS_ADDR       EQU 0               ; screen address
UPDATEBRICKS_SPRITE     EQU 2               ; sprite address
UPDATEBRICKS_ATTRADDR   EQU 4               ; attr address
UpdateBricks:           block UPDATEBRICKS_SIZE * 5 + 2, 0  ; Enough for 5 blocks + 16bit null termination

; variables
yballdir:               db 0
xballdir:               db 0

oldbally:               db 0
oldballx:               db 0
proposedbally:          db 0
proposedballx:          db 0

batvelocitydelta:       dw 0
batvelocitytarget:      db 0
batvelocity:            dw 0

lives:                  db INITIAL_LIVES

currentlevel:           db 1

; level data
; number blocks, name, data = 5 bytes
LEVELDATA_SIZE          EQU 5
LEVELDATA_COUNT         EQU 0
LEVELDATA_NAME          EQU 1
LEVELDATA_DATA          EQU 3

; sprite table, enough space for 2 sprites on screen
; Flags: bit 1 - active
;        bit 2 - size (0 - 8x8, 1 - 16x8)
SPRITETABLE_FLAGS       EQU 0
SPRITETABLE_Y           EQU 1                       ; 8bit y
SPRITETABLE_X           EQU 2                       ; 8bit x
SPRITETABLE_OLD_SCADD   EQU 3                       ; where the old sprite was drawn
SPRITETABLE_PRESHIFT    EQU 5                       ; data table
SPRITETABLE_DATA        EQU 7                       ; current sprite shifted data
SPRITETABLE_SCADD       EQU 9                       ; where the new sprite will be drawn
SPRITETABLE_OLD_DATA    EQU 11                      ; old sprite shifted data
SPRITETABLE_OLD_X       EQU 13                      ; old 8bit x - should change to shift offset
SPRITETABLE_Y16         EQU 14                      ; 16bit y - high byte is pixel coord, low is fractional
SPRITETABLE_X16         EQU 16                      ; 16bit x
SPRITETABLE_SIZE        EQU 18

spritetable:            block SPRITETABLE_SIZE * MAX_SPRITES

currentloop:            db 0
mainloops:              dw StartScreenLoop, MainGameLoop, GameOverLoop, IntroLoop, LevelCompleteLoop
initialisers:           dw StartScreenInitialise, GameLoopInitialise, GameOverInitialise, IntroInitialise, LevelCompleteInitialise

bonusadder              db 0
score:                  byte "000000\0"

breakthru_string:       byte "BRICK IN THE WALL\0"
anykey_string:          byte "PRESS SPACE TO START\0"
score_string:           byte "SCORE\0"
lives_string:           byte "LIVES\0"
gameover_string:        byte "GAME OVER\0"
level_string            byte "LEVEL \0\0\0"
level_complete_string:  byte "LEVEL CLEAR\0"

                        org 0xa000
ScreenBuffer:           block 32 * 24 * 8, 0

previous_row:           block 16, 0
LevelMap:               block 256

DRAWCELL_SIZE           EQU 12
DRAWCELL_ATTRADDR       EQU 0
DRAWCELL_ATTR           EQU 2
DRAWCELL_SCRHIGH        EQU 3
DRAWCELL_DATA           EQU 4

; Enough space for 200 cells
DrawCellCount:          db 0
DrawCellList:           block DRAWCELL_SIZE * MAX_CELLS, 0          ; contains drawcell data
DrawCellListNext:       dw DrawCellList
UsedCellList:           block MAX_CELLS * 2, 0                      ; contains a pointer to the cell in UsedCellList
UsedCellListNext:       dw UsedCellList

                        org 0xd000
UsedCellMap:            block 32 * 24, 255

CLEARCELL_SIZE          EQU 4
CLEARCELL_ATTRADDR      EQU 0
CLEARCELL_PADDING       EQU 2
CLEARCELL_SCRHIGH       EQU 3

ClearCellCount:         db 0
ClearCellList:          block MAX_CELLS * CLEARCELL_SIZE, 0
                        include "anarchist-font.z80"