; Points ix to the current level
LoadCurrentLevel:
                        push hl                                 ; store hl

                        ld h, 0                                 ; load the current level into hl
                        ld a, (currentlevel)
                        ld l, a
                        add hl, hl                              ; double it because we're accessing memory offsets

                        ld de, levels                           ; load the levels table
                        add hl, de                              ; point hl to the current level

                        ld a, (hl)                              ; get the address of the level in hl
                        inc hl
                        ld h, (hl)
                        ld l, a

                        ld ix, hl                               ; copy hl to ix

                        pop hl                                  ; restore
                        ret

; Inputs: hl: pixel coords (including offset)
; Outputs: hl: address of corresponding brick in level map
Pixel2LevelMap:
                        ld a, l
                        sub 32
                        ld l, a
                        ; fall thru to PixelNoOffset2LevelMap
PixelNoOffset2LevelMap:
                        push de

                        ld de, LevelMap

                        srl h
                        srl h
                        srl h
                        srl h

                        ld a, l                             
                        add a
                        add h

                        ld h, 0
                        ld l, a

                        add hl, de

                        pop de
                        ret

; inputs b - brick x, c - brick y
; outputs: h - pixel x, l - pixel y
Brick2Pixel:
                        ex af, af'

                        ld a, b
        .4              add a, a

                        ld h, a

                        ld a, c
        .3              add a, a

                        add a, 32                          ; y offset

                        ld l, a

                        ex af, af'
                        
                        ret

; Does not take offset into account
Pixel2Brick:
                        ld a, l
                        sub 32
                        ld l, a

                        srl h
                        srl h
                        srl h
                        srl h

                        srl l
                        srl l
                        srl l
                        ret

Brick2LevelMap:
                        ld de, LevelMap

                        ld a, l
                        add a, a
                        add a, a
                        add a, a
                        add a, a

                        add h

                        ld h, 0
                        ld l, a

                        add hl, de
                        ret

; Resets all the bricks in the level to on
ResetLevel:
                        push hl
                        ld hl, LevelMap - 16                    ; point hl to the brick map
                        ld de, LevelMap - 15
                        xor a                                 
                        ld bc, 0x10F
ResetNextBrick                        
                        ld (hl), a                              ; mark brick inactive
                        ldir
                        pop hl
                        ret

; LoadLevel - Loads the current level into the LevelMap
LoadLevel:
                        call LoadCurrentLevel
                        ld b, (ix)                                       ; brick count
                        ld a, b
                        ld (LevelBlockCount), a
                        ld c, 0

                        ld de, LevelMap
                        inc ix                                          ; Put ix after the level name
                        inc ix
                        inc ix

LoadNextBrick:
                        ld a, (ix)                                      ; check if ix is a colour command           
                        cp 255
                        jp z, SetBrickColour

                        ld h, 0
                        ld l, a
                        
                        add hl, de
                        ld (hl), c

                        inc ix
                        djnz LoadNextBrick

                        call CalculateBorder
                        ret

SetBrickColour:
                        ld a, (ix + 1)
                        sla a
                        sla a
                        set 4, a                                     ; Set bit 4 to indicate a brick
                        ld c, a
                        inc ix
                        inc ix
                        jr LoadNextBrick                             ; Don't count colour instructions
                                                                     ; towards the number of blocks so skip djnz

CalculateBorder:
                        ld hl, LevelMap - 16
                        ld c, 0

CalculateBorderNextRow:
                        ld b, 0

CalculateBorderNextBlock:
                        ld a, (hl)

                        call CheckLeft
                        call CheckRight
                        call CheckAbove
                        call CheckBelow

CalculateBorderMoveToNextBlock
                        inc hl

                        inc b
                        ld a, b
                        cp 16
                        jr nz, CalculateBorderNextBlock

                        inc c
                        ld a, c
                        cp 17
                        jr nz, CalculateBorderNextRow

                        ret

CheckLeft:
                        ld a, b
                        and a
                        ret z

                        ld ix, hl
                        ld a, (ix - 1)
                        and 16
                        ret z

                        ld a, (hl)
                        set 3, a
                        ld (hl), a

                        ret
CheckRight:
                        ld a, b
                        cp 15
                        ret z

                        ld ix, hl
                        ld a, (ix + 1)
                        and 16
                        ret z

                        ld a, (hl)
                        set 2, a
                        ld (hl), a
                        ret
CheckAbove:
                        ld a, c
                        and a
                        ret z

                        ld ix, hl
                        ld a, (ix - 16)
                        and 16
                        ret z

                        ld a, (hl)
                        set 1, a
                        ld (hl), a
                        ret
CheckBelow:
                        ld a, c
                        cp 16
                        ret z

                        ld ix, hl
                        ld a, (ix + 16)
                        and 16
                        ret z

                        ld a, (hl)
                        set 0, a
                        ld (hl), a
                        ret

DisplayLevel:
                        ld de, BACKBUFFER_BASE + LEVEL_BASE_OFFSET ; 0, 31
                        ld hl, LevelMap-16
                        ld b, 16

DisplayNextRow:
                        call DrawRowOfBricks
                        call NextCharRow
                        djnz DisplayNextRow

                        call ColourLevel
                        ret

DrawRowOfBricks:
                        push bc, de
                        ld b, 16

DrawNextBrick:
                        push de

                        ld a, (hl)
                        cp 16
                        jr c, DLRDB1
                        ld a, 16
DLRDB1:
                        inc hl

                        push de

                        exx

                        ld bc, 0x0816

                        ld h, 0
                        ld l, a
                        add hl, hl
                        ld de, brickTable
                        add hl, de

                        ld a, (hl)
                        inc hl
                        ld h, (hl)
                        ld l, a

                        pop de

DrawNextBrickLine:
                        ldi
                        ldi

                        dec de                           ; FIXME: Zigzag data?
                        dec de
                        inc d

                        djnz DrawNextBrickLine

                        push de
                        exx
                        pop de
                        pop de
                        inc de
                        inc de

                        djnz DrawNextBrick
                        pop de, bc
                        ret

; de - screen address
; hl - sprite address
DrawBrick:
                        ld bc, 0x0816
DrawBrick1:
                        ld a, (hl)
                        ld (de), a
                        inc e
                        inc hl
                        ld a, (hl)
                        ld (de), a
                        dec e
                        inc d
                        inc hl
                        ; ldi
                        ; ldi
                        ; inc d
                        ; dec de
                        ; dec de

                        djnz DrawBrick1
                        ret

ColourLevel:
                        ld hl, LevelMap
                        ld de, 0x5880

                        ld bc, 255
ColourNextBlock:
                        ld a, (hl)
                        bit 4, a
                        jr nz, DontChangeColour
                        ld a, 56
                        jr ColourBlock
DontChangeColour:
                        srl a
                        srl a
                        or 7
ColourBlock:
                        ld (de), a
                        inc de
                        ld (de), a
                        inc de
                        inc hl

                        djnz ColourNextBlock
                        ret

CheckBrickCollision:
                        ld a, l

                        srl a
                        srl a
                        srl a

                        sub 2
                        cp 17

                        jr c, CBC
                        ret

CBC:
                        ex af, af'
                        ld a, (yballdir)
                        cp 1                    ; going down
                        jr z, CBC1
                        ex af, af'
                        dec a
                        jr CBC15
CBC1:
                        ex af, af'
CBC15:
                        sla a
                        sla a
                        sla a
                        sla a

                        ld d, 0
                        ld e, a

                        ld c, a
                        srl c
                        ld a, c
                        add a, 24
                        ld c, a

                        ld iy, LevelMap - 16
                        add iy, de

                        exx
                        ld c, 0
                        exx

CBCNextRow:
                        ld b, 0
CBCNextBrick:
                        ld a, (iy)
                        and 16
                        jr z, CBCMoveToNextBrick

                        call CheckCollision8v16x8v8                     ; Check if the ball has entered the 8x8 

                        jr z, BrickCollision                            ; check the fine grained collisions

CBCMoveToNextBrick:
                        inc iy

                        exx
                        inc c
                        ld a, c
                        exx

                        cp 32
                        ret z

                        ld a, b
                        add 16
                        ld b, a
                        cp 256                          ; and a? test for 0
                        jr nz, CBCNextBrick

                        ld a, c
                        add 8
                        cp 160

                        ret z

                        ld c, a

                        jr CBCNextRow
                        ret


; inputs: iy - the collision brick
;         bc - x,y of the colllision brick
;         hl - x,y of the ball
BrickCollision:
                        push bc
                        call CheckFineGrainCollision            ; check fine grained collision
                        pop bc

                        jr nz, CBCMoveToNextBrick                       ; check if we actually hit before removing brick

                        call RemoveBrick                        ; remove the brick

                        ret                                     ; ret here will stop checking any other bricks

; bc - brick x,y
; hl - ball x, y
CheckFineGrainCollision:
                                                                ; first check if the centre of the ball
                                                                ; on the horizontal

                        push bc

                        ld a, b                                 ; add 15
                        add 16
                        ld c, a                                 ; higher brick x in c

                        ld a, h                                 ; ball x in a
                        add 4                                   ; centre of the ball

                        call Between                            ; is between x bounds?
                        pop bc
                        jr nz, CheckDirectionSwitch2            ; no? check the vertical

                        call Switch_YDir                        ; if ball x is between brick x then
                        call Ball_HitY                          ; it hit on the top or bottom
                                                                ; so switch y direction
                        cp a                                    ; set z to indicate a collision
                        ret                                     ; return because it can't hit anywhere else

CheckDirectionSwitch2:
                                                                ; next check if the centre of the ball
                                                                ; on the vertical side
                        push bc

                        ld a, c                                 ; lower brick y in b
                        add 8                                   ; add 8
                        ld c, a                                 ; higher brick y in c

                        ld a, l                                 ; ball y in a
                        add 4                                   ; get centre of ball

                        call Between                            ; is centre of ball between the brick y?

                        pop bc
                        jr nz, CheckInnerBox                    ; no? then check the inner box

                        call Switch_XDir                        ; if ball y is between the brick y then
                        call Ball_HitX                          ; it hit on the side, so change x direction
                        cp a                                    ; set z to indicate a collision
                        ret                                     ; return because if can't hit anywhere else

CheckInnerBox:
                                                                ; inner box is the 6x6 box inside the 8x8
                        push hl
                        inc h
                        inc l

                        call CheckColllision6v16x6v8            ; check inner box
                        pop hl

                        ret nz                                  ; Didn't collide, so return

                        call Switch_YDir                        ; Hitting the inner box means it hit on the corner
                        call Switch_XDir                        ; so switch both directions
                        call Ball_HitY
                        call Ball_HitX

                        cp a                                    ; set z to indicate a collision happened

                        ret

; RemoveBrick - Remove the brick from the screen

RemoveBrick
                        ; bc: brick pixel x,y
                        ; iy: brick in levelmap
                        ; hl: ball x,y

                        push bc, de, ix

                        res 0, (iy-16)
                        res 1, (iy+16)
                        res 2, (iy-1)
                        res 3, (iy+1)
                        res 4, (iy)                             ; Erase the brick

                        ld hl, bc
                        ld ix, UpdateBricks
                        ld a, (iy)
                        and 15

                        call AddUpdateBrick

                        ld a, (iy-16)
                        and 16
                        jr nz, RB1

                        push hl

                        ld a, l
                        sub 8
                        ld l, a

                        ld a, (iy-16)
                        call AddUpdateBrick

                        pop hl

RB1:
                        ld a, (iy+16)
                        and 16
                        jr nz, RB2

                        push hl

                        ld a, l
                        add 8
                        ld l, a

                        ld a, (iy+16)
                        call AddUpdateBrick

                        pop hl

RB2:
                        ld a, (iy-1)
                        and 16
                        jr nz, RB3

                        push hl

                        ld a, h
                        sub 16
                        ld h, a

                        ld a, (iy-1)
                        call AddUpdateBrick

                        pop hl

RB3:
                        ld a, (iy+1)
                        and 16
                        jr nz, RB4

                        push hl

                        ld a, h
                        add 16
                        ld h, a

                        ld a, (iy+1)
                        call AddUpdateBrick

                        pop hl

RB4:
                        call AddBrickScore

                        ld a, (bonusadder)                      ; increase the score bonus for every brick hit
                        inc a
                        ld (bonusadder), a

                        ld a, (LevelBlockCount)
                        dec a
                        ld (LevelBlockCount), a

                        pop ix, de, bc
                        ret

; a - brick code
; hl - brick pixel
AddUpdateBrick:
                        ex af, af'
                        ld a, 6
                        out (0xfe), a
                        ex af, af'

                        push bc, hl

                        call scadd
                        ex de, hl                       ; screen addr in hl

                        ld de, ScreenBuffer - SCREEN_BASE       ; offset between screen address and buffer
                        add hl, de                              ; get address in buffer
                        
                        call GetBrickSprite             ; brick sprite in de
                        ex de, hl                       ; buffer addr in de, sprite in hl

                        ld bc, 16

                        dup 7                           ; update the brick sprite in the backbuffer
        .2              ldi
                        inc d
        .2              dec de
                        edup

        .2              ldi

                        pop hl
                        call pixelattradd
                        ld a, 56
                        ld (de), a

                        call AddBGCell
                        inc de

                        ld a, 56
                        ld (de), a

                        call AddBGCell

                        pop bc

                        ld a, 1
                        out (0xfe), a

                        ret

; a - brick code
; returns: de - sprite address
GetBrickSprite:
                        and 15

                        push hl
                        ld h, 0
                        ld l, a
                        add hl, hl
                        ld de, brickTable
                        add hl, de

                        ld a, (hl)
                        inc hl
                        ld h, (hl)
                        ld l, a

                        ex de, hl
                        pop hl
                        ret

; hl - attr addr
; de - brick sprite
GetBrickAtAttr:
                        push hl

                        ld de, ATTR_BASE + (32 * 3)
                        sbc hl, de

                        jr c, GBAAOutside

                        srl h
                        rr l

                        ld a, h
                        and a

                        jr nz, GBAAOutside

                        ; get attr offset: attr - attrbase
                        ; attr offset - (32 * 3)
                        ; offset / 2
                        ; offset > 256 - return empty
                        ; add levelmap - 16
                        ; get brick

                        ld de, LevelMap - 16
                        add hl, de

                        ld a, (hl)
                        call GetBrickSprite

                        pop hl
                        ret

GBAAOutside:
                        ld a, 0
                        call GetBrickSprite

                        pop hl
                        ret